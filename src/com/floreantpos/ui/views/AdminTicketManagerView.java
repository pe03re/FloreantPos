package com.floreantpos.ui.views;

import java.awt.BorderLayout;
import java.awt.ComponentOrientation;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;

import net.miginfocom.swing.MigLayout;

import com.floreantpos.ITicketList;
import com.floreantpos.POSConstants;
import com.floreantpos.PosException;
import com.floreantpos.bo.ui.BackOfficeWindow;
import com.floreantpos.main.Application;
import com.floreantpos.model.Ticket;
import com.floreantpos.model.dao.TicketDAO;
import com.floreantpos.services.TicketService;
import com.floreantpos.swing.PosButton;
import com.floreantpos.ui.dialog.POSMessageDialog;
import com.floreantpos.ui.dialog.TicketSelectionDialog;
import com.floreantpos.ui.util.TicketUtils;
import com.floreantpos.ui.util.UiUtil;
import com.floreantpos.ui.views.order.OrderView;
import com.floreantpos.ui.views.order.ViewPanel;

/**
 * 
 * @author SOMYA
 */
public class AdminTicketManagerView extends ViewPanel implements ActionListener, ITicketList {
	public final static String VIEW_NAME = "ADMIN TICKET MANAGER";
	private static AdminTicketManagerView instance;
	private PosButton btnEditTicket = new PosButton(POSConstants.EDIT_TICKET_BUTTON_TEXT);
	private PosButton btnOrderInfo = new PosButton(POSConstants.ORDER_INFO_BUTTON_TEXT);
	private com.floreantpos.ui.TicketListView myTicketList = new com.floreantpos.ui.TicketListView();
	private JPanel ticketsPanel;
	protected javax.swing.JButton btnRefresh;
	protected org.jdesktop.swingx.JXDatePicker dpEndDate;
	protected org.jdesktop.swingx.JXDatePicker dpStartDate;
	protected javax.swing.JLabel jLabel2;
	protected javax.swing.JLabel jLabel3;

	/** Creates new form SwitchboardView */
	public AdminTicketManagerView() {
		initComponents();
		btnEditTicket.addActionListener(this);
		btnOrderInfo.addActionListener(this);
		applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));
		instance = this;
	}

	public static AdminTicketManagerView getInstance() {
		return instance;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		setLayout(new java.awt.BorderLayout(10, 10));

		javax.swing.JPanel centerPanel = new javax.swing.JPanel(new java.awt.BorderLayout(5, 5));
		javax.swing.JPanel ticketsAndActivityPanel = new javax.swing.JPanel(new java.awt.BorderLayout(10, 10));

		TitledBorder titledBorder = BorderFactory.createTitledBorder(null, "*** ADMIN TICKET MANAGER ---> USE WITH CAUTION ***", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION);
		ticketsAndActivityPanel.setBorder(new CompoundBorder(titledBorder, new EmptyBorder(2, 2, 2, 2)));

		ticketsPanel = collectTickets();
		ticketsAndActivityPanel.add(ticketsPanel, BorderLayout.NORTH);
		ticketsAndActivityPanel.add(myTicketList, java.awt.BorderLayout.CENTER);
		centerPanel.add(ticketsAndActivityPanel, java.awt.BorderLayout.CENTER);

		JPanel rightPanel = new JPanel(new BorderLayout(20, 20));
		TitledBorder titledBorder2 = BorderFactory.createTitledBorder(null, "-", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION);
		rightPanel.setBorder(new CompoundBorder(titledBorder2, new EmptyBorder(2, 2, 6, 2)));

		JPanel orderPanel = new JPanel(new MigLayout("ins 2 2 0 2, fill, hidemode 3, flowy", "fill, grow", ""));
		orderPanel.add(btnOrderInfo, "grow");
		orderPanel.add(btnEditTicket, "grow");
		rightPanel.add(orderPanel);
		centerPanel.add(rightPanel, java.awt.BorderLayout.EAST);
		add(centerPanel, java.awt.BorderLayout.CENTER);
	}

	public void refreshView() {
		updateTicketList();
	}

	private JPanel collectTickets() {
		JPanel ticketPanel = new com.floreantpos.swing.TransparentPanel();
		ticketPanel.setLayout(new MigLayout("fill", "fill, grow", ""));
		jLabel2 = new javax.swing.JLabel();
		dpStartDate = UiUtil.getCurrentMonthStart();
		dpEndDate = UiUtil.getCurrentMonthEnd();
		jLabel3 = new javax.swing.JLabel();
		btnRefresh = new javax.swing.JButton();
		jLabel2.setText(com.floreantpos.POSConstants.START_DATE + ":");
		jLabel3.setText(com.floreantpos.POSConstants.END_DATE + ":");

		btnRefresh.setText(com.floreantpos.POSConstants.REFRESH);
		btnRefresh.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				doRefreshTickets(evt);
			}
		});
		org.jdesktop.layout.GroupLayout ticketConstraintPanelLayout = new org.jdesktop.layout.GroupLayout(ticketPanel);
		ticketPanel.setLayout(ticketConstraintPanelLayout);
		ticketConstraintPanelLayout.setHorizontalGroup(ticketConstraintPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				ticketConstraintPanelLayout
						.createSequentialGroup()
						.addContainerGap()
						.add(ticketConstraintPanelLayout
								.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
								.add(ticketConstraintPanelLayout
										.createSequentialGroup()
										.add(ticketConstraintPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jLabel2))
										.add(15, 15, 15)
										.add(ticketConstraintPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false).add(dpStartDate,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel3).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(dpEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
								.add(org.jdesktop.layout.GroupLayout.TRAILING, btnRefresh)).addContainerGap()));
		ticketConstraintPanelLayout.setVerticalGroup(ticketConstraintPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				ticketConstraintPanelLayout
						.createSequentialGroup()
						.addContainerGap()
						.add(ticketConstraintPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE))
						.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
						.add(ticketConstraintPanelLayout
								.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
								.add(dpEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.add(jLabel3)
								.add(ticketConstraintPanelLayout
										.createSequentialGroup()
										.add(ticketConstraintPanelLayout
												.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
												.add(dpStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(jLabel2)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(btnRefresh)))
						.addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		ticketConstraintPanelLayout.linkSize(new java.awt.Component[] { dpEndDate, dpStartDate, jLabel2, jLabel3 }, org.jdesktop.layout.GroupLayout.VERTICAL);
		add(ticketPanel, java.awt.BorderLayout.NORTH);
		return ticketPanel;
	}

	protected void doRefreshTickets(java.awt.event.ActionEvent evt) {
		Date fromDate = dpStartDate.getDate();
		Date toDate = dpEndDate.getDate();

		if (fromDate.after(toDate)) {
			POSMessageDialog.showError(BackOfficeWindow.getInstance(), com.floreantpos.POSConstants.FROM_DATE_CANNOT_BE_GREATER_THAN_TO_DATE_);
			return;
		}
		updateTicketList();
	}

	private void doShowOrderInfo() {
		doShowOrderInfo(myTicketList.getSelectedTickets());
	}

	private void doShowOrderInfo(List<Ticket> tickets) {
		try {

			if (tickets.size() == 0) {
				POSMessageDialog.showMessage(this, "Please select at atleast 1 ticket");
				return;
			}

			List<Ticket> ticketsToShow = new ArrayList<Ticket>();

			for (int i = 0; i < tickets.size(); i++) {
				Ticket ticket = tickets.get(i);
				ticketsToShow.add(TicketDAO.getInstance().loadFullTicket(ticket.getId()));
			}

			OrderInfoView view = new OrderInfoView(ticketsToShow);
			OrderInfoDialog dialog = new OrderInfoDialog(view, Application.getBackOfficeWindow());
			dialog.setSize(400, 600);
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setLocationRelativeTo(Application.getBackOfficeWindow());
			dialog.setVisible(true);
		} catch (Exception e) {
			POSMessageDialog.showError(this, POSConstants.ERROR_MESSAGE, e);
		}
	}

	private void doEditTicket() {
		try {
			Ticket ticket = null;

			List<Ticket> selectedTickets = myTicketList.getSelectedTickets();

			if (selectedTickets.size() > 0) {
				ticket = selectedTickets.get(0);
			} else {
				String ticketId = TicketSelectionDialog.takeTicketInput("Enter ticket id", TicketUtils.getTicketPrefix(), Application.getBackOfficeWindow());
				if (ticketId == null) {
					return;
				}
				ticket = TicketService.getTicket(ticketId);
			}
			editTicket(ticket);
		} catch (PosException e) {
			POSMessageDialog.showError(this, e.getMessage());
		} catch (Exception e) {
			POSMessageDialog.showError(this, e.getMessage(), e);
		}
	}

	private void editTicket(Ticket ticket) {
		Ticket ticketToEdit = TicketDAO.getInstance().loadFullTicket(ticket.getId());

		BackOfficeWindow backOfficeWindow = BackOfficeWindow.getInstance();
		OrderView ov = null;
		JTabbedPane tabbedPane = backOfficeWindow.getTabbedPane();
		int index = tabbedPane.indexOfTab(OrderView.VIEW_NAME);
		if (index == -1) {
			ov = OrderView.getInstance();
			ov.setCurrentTicket(ticketToEdit);
			tabbedPane.addTab(OrderView.VIEW_NAME, ov);
		} else {
			ov = (OrderView) tabbedPane.getComponentAt(index);
		}
		try {
			tabbedPane.setSelectedComponent(ov);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void updateView() {
		btnEditTicket.setEnabled(true);
		btnEditTicket.setEnabled(true);
	}

	public synchronized void updateTicketList() {
		try {
			List<Ticket> tickets = TicketDAO.getInstance().findTickets(dpStartDate.getDate(), dpEndDate.getDate());
			myTicketList.setTickets(tickets);
			ticketsPanel.invalidate();
		} catch (Exception e) {
			POSMessageDialog.showError(this, "Error getting open ticket list", e);
		} finally {
			Application.getPosWindow().setGlassPaneVisible(false);
		}
	}

	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		if (source == btnEditTicket) {
			doEditTicket();
		} else if (source == btnOrderInfo) {
			doShowOrderInfo();
		}
		refreshView();
	}

	public Ticket getFirstSelectedTicket() {
		List<Ticket> selectedTickets = myTicketList.getSelectedTickets();

		if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
			POSMessageDialog.showMessage(this, "Please select a ticket");
			return null;
		}

		Ticket ticket = selectedTickets.get(0);
		return ticket;
	}

	public Ticket getSelectedTicket() {
		List<Ticket> selectedTickets = myTicketList.getSelectedTickets();

		if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
			return null;
		}

		Ticket ticket = selectedTickets.get(0);
		return ticket;
	}

	@Override
	public String getViewName() {
		return VIEW_NAME;
	}
}
